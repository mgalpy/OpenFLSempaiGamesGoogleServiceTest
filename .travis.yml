language: haxe

# TravisCI by default run on linux.
# Let's enable both linux and mac builds because why not?
os:
  - linux

# Test with Haxe 3.2.1 and Haxe development.
haxe:
  - "3.2.1"
  # - development

matrix:
  # Allow Haxe development to fail.
  allow_failures:
    - haxe: development

addons:
  # This is the preferred way to install apt packages.
  # However, it only allow some but not all packages.
  # Alternatively, we can use `sudo apt-get install ...` in the `install:` section.
  # http://docs.travis-ci.com/user/apt/#Adding-APT-Packages
  apt:
    packages:
      # C++ (for rebuilding hxcpp)
      - gcc-multilib
      - g++-multilib
      # Python
      - python3
      # PHP
      - php5-cli
      # C#
      - mono-devel
      - mono-mcs
      # Flash
      - libcurl3:i386
      - libglib2.0-0:i386
      - libx11-6:i386
      - libxext6:i386
      - libxt6:i386
      - libxcursor1:i386
      - libnss3:i386
      - libgtk2.0-0:i386

install:
  # os-specific config
  - curl --location http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz | tar -x -z -C $HOME
  - export ANDROID_HOME=$HOME/android-sdk-linux
  - export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
  - android list sdk -u -e -a
  - ( sleep 5 && while [ 1 ]; do sleep 1; echo y; done ) | android update sdk --no-ui --all --filter tools,platform-tools,build-tools-19.1.0,android-23,sys-img-armeabi-v7a-google_apis-23,sys-img-x86_64-google_apis-23,addon-google_apis-google-23,extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services,extra-android-support
  # - sudo apt-get install unzip
  - curl --location http://dl.google.com/android/repository/android-ndk-r11c-linux-x86_64.zip -o android-ndk-r11c-linux-x86_64.zip
  - unzip android-ndk-r11c-linux-x86_64.zip -d $HOME > log.txt 2>&1
  - export ANDROID_NDK_ROOT=$HOME/android-ndk-r11c
  - export PATH=$PATH:$ANDROID_NDK_ROOT
  - curl --location http://archive.apache.org/dist/ant/binaries/apache-ant-1.9.2-bin.tar.gz | tar -x -z -C $HOME
  - export ANDROID_NDK_ROOT=$HOME/apache-ant-1.9.2
  - export PATH=$PATH:$ANDROID_NDK_ROOT
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      export DISPLAY=:99.0;
      export AUDIODEV=null;
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      brew update > log.txt 2>&1;
      brew install mono > log.txt 2>&1;
      brew install phantomjs > log.txt 2>&1;
      brew install python3 > log.txt 2>&1;
    fi
  # Download and setup a standalone flash player debugger
  # - haxe flash/install.hxml
  # Install haxelibs
  - if [ "${TRAVIS_HAXE_VERSION}" = "development" ]; then
      haxelib git hxcpp https://github.com/HaxeFoundation/hxcpp.git;
      pushd $(haxelib path hxcpp | head -1);
        pushd tools/hxcpp; haxe compile.hxml; popd;
        pushd project; neko build.n; popd;
      popd;
    else
      haxelib install hxcpp > log.txt 2>&1;
    fi
  - haxelib install hscript > log.txt 2>&1
  - haxelib list 
  - haxelib install format > log.txt 2>&1
  - haxelib install xmltools > log.txt 2>&1
  # - haxelib install bezier > log.txt 2>&1
  # - yes | haxelib run flixel-tools setup --quiet
  - haxelib install flixel 4.1.1 > log.txt 2>&1
  # - haxelib git hxcpp-debugger https://github.com/HaxeFoundation/hxcpp-debugger.git
  # - haxelib install lime > log.txt 2>&1
  # - haxelib run lime rebuild linux -64 -Dlime-legacy -release -clean
  # - haxelib install openfl > log.txt 2>&1
  # - haxelib install flixel-tools 1.1.3 > log.txt 2>&1
  # - haxelib install flixel-addons 2.1.0 > log.txt 2>&1
  # - haxelib install nape > log.txt 2>&1 
  - haxelib install lime-tools > log.txt 2>&1
  - haxelib install extension-googleplaygames > log.txt 2>&1
  - haxelib list 
  # - yes | haxelib run lime setup --quiet

before_script:
  # http://forum.haxeflixel.com/topic/84/segfault-on-any-lime-build-ubuntu-16-04/12
   - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      sudo apt-get autoremove;
    fi

script:
  - echo ${HOME}
  - echo ${USERPROFILE}
  - cd $HOME
  - curl --remote-name http://arcademechanics.com/download/pubgame/.hxcpp_config.xml
  - head -100 $HOME/.hxcpp_config.xml
  - cd ${HOME}/build/mgalpy/OpenFLSempaiGamesGoogleServiceTest
  - pwd
  - ls
  # - haxelib run lime setup android;
  # - haxelib run lime update android;
  # - haxelib run lime build android -Dlegacy;
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      haxelib run lime build android -release -verbose;
      haxelib run lime deploy android;
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      export IPHONE_VER=9.1;
      CODE_SIGN_IDENTITY="";
      CODE_SIGNING_REQUIRED=NO;
      haxelib run lime update ios;
      haxelib run lime build ios;
      haxelib run lime deploy ios;
    fi
  - echo ${PATH}
  - echo ${HOME}
  - cd bin
  - ls
  - cd android
  - ls
  - cd bin
  - ls
  - cd bin
  - ls
  - curl -T OpenFLHelloWorld-debug.apk -u ${ftp_user}:${ftp_password} ftp://arcademechanics.com/download/pubgame/

after_success:
  #  "curl --ftp-create-dirs -T uploadfilename -u ${ftp_user}:${ftp_password} ftp://arcademechanics.com/download/myfile"

before_deploy:
  # mac - mac64; ios - ios; linux - linux64
  - ls
  - pwd
  - cd ${HOME}/build/mgalpy/OpenFLSempaiGamesGoogleServiceTest
  - ls
  - cd bin
  - ls
  - cd android
  - ls
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
      export deployFile="${HOME}/build/mgalpy/OpenFLSempaiGamesGoogleServiceTest/bin/android/*.zip";
    elif [ "${TRAVIS_OS_NAME}" = "osx" ]; then
      export deployFile="/Users/travis/build/mgalpy/OpenFLSempaiGamesGoogleServiceTest/bin/ios/cpp/*.zip";
    fi

deploy:
  provider: releases
  api_key: ${api_key}
  file: "${deployFile}"
  file_glob: true
  skip_cleanup: true
  on:
    all_branches: true
    tags: true